/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.containerregistry.v2019_06_01_preview.implementation;

import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.TaskRun;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.IdentityProperties;
import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.ProvisioningState;
import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.RunRequest;
import com.microsoft.azure.management.containerregistry.v2019_06_01_preview.Run;

class TaskRunImpl extends CreatableUpdatableImpl<TaskRun, TaskRunInner, TaskRunImpl> implements TaskRun, TaskRun.Definition, TaskRun.Update {
    private final ContainerRegistryManager manager;
    private String resourceGroupName;
    private String registryName;
    private String taskRunName;

    TaskRunImpl(String name, ContainerRegistryManager manager) {
        super(name, new TaskRunInner());
        this.manager = manager;
        // Set resource name
        this.taskRunName = name;
        //
    }

    TaskRunImpl(TaskRunInner inner, ContainerRegistryManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.taskRunName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.registryName = IdParsingUtils.getValueFromIdByName(inner.id(), "registries");
        this.taskRunName = IdParsingUtils.getValueFromIdByName(inner.id(), "taskRuns");
        //
    }

    @Override
    public ContainerRegistryManager manager() {
        return this.manager;
    }

    @Override
    public Observable<TaskRun> createResourceAsync() {
        TaskRunsInner client = this.manager().inner().taskRuns();
        return client.createAsync(this.resourceGroupName, this.registryName, this.taskRunName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<TaskRun> updateResourceAsync() {
        TaskRunsInner client = this.manager().inner().taskRuns();
        return client.createAsync(this.resourceGroupName, this.registryName, this.taskRunName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TaskRunInner> getInnerAsync() {
        TaskRunsInner client = this.manager().inner().taskRuns();
        return client.getAsync(this.resourceGroupName, this.registryName, this.taskRunName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public IdentityProperties identity() {
        return this.inner().identity();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public RunRequest runRequest() {
        return this.inner().runRequest();
    }

    @Override
    public Run runResult() {
        RunInner inner = this.inner().runResult();
        if (inner != null) {
            return  new RunImpl(inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public TaskRunImpl withExistingRegistry(String resourceGroupName, String registryName) {
        this.resourceGroupName = resourceGroupName;
        this.registryName = registryName;
        return this;
    }

    @Override
    public TaskRunImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public TaskRunImpl withIdentity(IdentityProperties identity) {
        this.inner().withIdentity(identity);
        return this;
    }

    @Override
    public TaskRunImpl withRunRequest(RunRequest runRequest) {
        this.inner().withRunRequest(runRequest);
        return this;
    }

    @Override
    public TaskRunImpl withRunResult(RunInner runResult) {
        this.inner().withRunResult(runResult);
        return this;
    }

    @Override
    public TaskRunImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

}
