/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.CustomizationPolicies;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.CustomizationPolicy;

class CustomizationPoliciesImpl extends WrapperImpl<CustomizationPoliciesInner> implements CustomizationPolicies {
    private final VMwareCloudSimpleManager manager;

    CustomizationPoliciesImpl(VMwareCloudSimpleManager manager) {
        super(manager.inner().customizationPolicies());
        this.manager = manager;
    }

    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    private CustomizationPolicyImpl wrapModel(CustomizationPolicyInner inner) {
        return  new CustomizationPolicyImpl(inner, manager());
    }

    @Override
    public Observable<CustomizationPolicy> listAsync(final String regionId, final String pcName) {
        CustomizationPoliciesInner client = this.inner();
        return client.listAsync(regionId, pcName)
        .flatMapIterable(new Func1<Page<CustomizationPolicyInner>, Iterable<CustomizationPolicyInner>>() {
            @Override
            public Iterable<CustomizationPolicyInner> call(Page<CustomizationPolicyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<CustomizationPolicyInner, CustomizationPolicy>() {
            @Override
            public CustomizationPolicy call(CustomizationPolicyInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<CustomizationPolicy> getAsync(String regionId, String pcName, String customizationPolicyName) {
        CustomizationPoliciesInner client = this.inner();
        return client.getAsync(regionId, pcName, customizationPolicyName)
        .map(new Func1<CustomizationPolicyInner, CustomizationPolicy>() {
            @Override
            public CustomizationPolicy call(CustomizationPolicyInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
