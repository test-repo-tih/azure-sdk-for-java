/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.billing.v2019_10_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.billing.v2019_10_01_preview.ErrorResponseException;
import com.microsoft.azure.management.billing.v2019_10_01_preview.InitiateTransferRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PartnerTransfers.
 */
public class PartnerTransfersInner {
    /** The Retrofit service to perform REST calls. */
    private PartnerTransfersService service;
    /** The service client containing this operation class. */
    private BillingManagementClientImpl client;

    /**
     * Initializes an instance of PartnerTransfersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PartnerTransfersInner(Retrofit retrofit, BillingManagementClientImpl client) {
        this.service = retrofit.create(PartnerTransfersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PartnerTransfers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PartnerTransfersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.PartnerTransfers initiate" })
        @POST("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/initiateTransfer")
        Observable<Response<ResponseBody>> initiate(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("customerName") String customerName, @Body InitiateTransferRequest parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.PartnerTransfers get" })
        @GET("providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}")
        Observable<Response<ResponseBody>> get(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("customerName") String customerName, @Path("transferName") String transferName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.billing.v2019_10_01_preview.PartnerTransfers cancel" })
        @HTTP(path = "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> cancel(@Path("billingAccountName") String billingAccountName, @Path("billingProfileName") String billingProfileName, @Path("customerName") String customerName, @Path("transferName") String transferName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Initiates the request to transfer the legacy subscriptions or RIs.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param parameters Parameters supplied to initiate the transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferDetailsInner object if successful.
     */
    public TransferDetailsInner initiate(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters) {
        return initiateWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, parameters).toBlocking().single().body();
    }

    /**
     * Initiates the request to transfer the legacy subscriptions or RIs.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param parameters Parameters supplied to initiate the transfer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransferDetailsInner> initiateAsync(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters, final ServiceCallback<TransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(initiateWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, parameters), serviceCallback);
    }

    /**
     * Initiates the request to transfer the legacy subscriptions or RIs.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param parameters Parameters supplied to initiate the transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<TransferDetailsInner> initiateAsync(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters) {
        return initiateWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, parameters).map(new Func1<ServiceResponse<TransferDetailsInner>, TransferDetailsInner>() {
            @Override
            public TransferDetailsInner call(ServiceResponse<TransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Initiates the request to transfer the legacy subscriptions or RIs.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param parameters Parameters supplied to initiate the transfer.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<ServiceResponse<TransferDetailsInner>> initiateWithServiceResponseAsync(String billingAccountName, String billingProfileName, String customerName, InitiateTransferRequest parameters) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.initiate(billingAccountName, billingProfileName, customerName, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<TransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransferDetailsInner> clientResponse = initiateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransferDetailsInner> initiateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the transfer details for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferDetailsInner object if successful.
     */
    public TransferDetailsInner get(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName).toBlocking().single().body();
    }

    /**
     * Gets the transfer details for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransferDetailsInner> getAsync(String billingAccountName, String billingProfileName, String customerName, String transferName, final ServiceCallback<TransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName), serviceCallback);
    }

    /**
     * Gets the transfer details for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<TransferDetailsInner> getAsync(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        return getWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName).map(new Func1<ServiceResponse<TransferDetailsInner>, TransferDetailsInner>() {
            @Override
            public TransferDetailsInner call(ServiceResponse<TransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the transfer details for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<ServiceResponse<TransferDetailsInner>> getWithServiceResponseAsync(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        return service.get(billingAccountName, billingProfileName, customerName, transferName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<TransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransferDetailsInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransferDetailsInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Cancels the transfer for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransferDetailsInner object if successful.
     */
    public TransferDetailsInner cancel(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        return cancelWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName).toBlocking().single().body();
    }

    /**
     * Cancels the transfer for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TransferDetailsInner> cancelAsync(String billingAccountName, String billingProfileName, String customerName, String transferName, final ServiceCallback<TransferDetailsInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName), serviceCallback);
    }

    /**
     * Cancels the transfer for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<TransferDetailsInner> cancelAsync(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        return cancelWithServiceResponseAsync(billingAccountName, billingProfileName, customerName, transferName).map(new Func1<ServiceResponse<TransferDetailsInner>, TransferDetailsInner>() {
            @Override
            public TransferDetailsInner call(ServiceResponse<TransferDetailsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels the transfer for given transfer Id.
     *
     * @param billingAccountName billing Account Id.
     * @param billingProfileName Billing Profile Id.
     * @param customerName Customer name.
     * @param transferName Transfer Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransferDetailsInner object
     */
    public Observable<ServiceResponse<TransferDetailsInner>> cancelWithServiceResponseAsync(String billingAccountName, String billingProfileName, String customerName, String transferName) {
        if (billingAccountName == null) {
            throw new IllegalArgumentException("Parameter billingAccountName is required and cannot be null.");
        }
        if (billingProfileName == null) {
            throw new IllegalArgumentException("Parameter billingProfileName is required and cannot be null.");
        }
        if (customerName == null) {
            throw new IllegalArgumentException("Parameter customerName is required and cannot be null.");
        }
        if (transferName == null) {
            throw new IllegalArgumentException("Parameter transferName is required and cannot be null.");
        }
        return service.cancel(billingAccountName, billingProfileName, customerName, transferName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TransferDetailsInner>>>() {
                @Override
                public Observable<ServiceResponse<TransferDetailsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TransferDetailsInner> clientResponse = cancelDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TransferDetailsInner> cancelDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TransferDetailsInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TransferDetailsInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
