/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridcompute.v2019_03_18;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.hybridcompute.v2019_03_18.implementation.HybridComputeManager;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.hybridcompute.v2019_03_18.implementation.MachineInner;

/**
 * Type representing Machine.
 */
public interface Machine extends HasInner<MachineInner>, Resource, GroupableResourceCore<HybridComputeManager, MachineInner>, HasResourceGroup, Refreshable<Machine>, Updatable<Machine.Update>, HasManager<HybridComputeManager> {
    /**
     * @return the agentVersion value.
     */
    String agentVersion();

    /**
     * @return the clientPublicKey value.
     */
    String clientPublicKey();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the errorDetails value.
     */
    List<ErrorDetail> errorDetails();

    /**
     * @return the lastStatusChange value.
     */
    DateTime lastStatusChange();

    /**
     * @return the machineFqdn value.
     */
    String machineFqdn();

    /**
     * @return the osName value.
     */
    String osName();

    /**
     * @return the osProfile value.
     */
    OSProfile osProfile();

    /**
     * @return the osVersion value.
     */
    String osVersion();

    /**
     * @return the physicalLocation value.
     */
    String physicalLocation();

    /**
     * @return the principalId value.
     */
    String principalId();

    /**
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * @return the status value.
     */
    StatusTypes status();

    /**
     * @return the tenantId value.
     */
    String tenantId();

    /**
     * @return the type1 value.
     */
    String type1();

    /**
     * @return the vmId value.
     */
    String vmId();

    /**
     * The entirety of the Machine definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Machine definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Machine definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the Machine definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the machine definition allowing to specify ClientPublicKey.
         */
        interface WithClientPublicKey {
            /**
             * Specifies clientPublicKey.
             * @param clientPublicKey Public Key that the client provides to be used during initial resource onboarding
             * @return the next definition stage
             */
            WithCreate withClientPublicKey(String clientPublicKey);
        }

        /**
         * The stage of the machine definition allowing to specify OsProfile.
         */
        interface WithOsProfile {
            /**
             * Specifies osProfile.
             * @param osProfile Specifies the operating system settings for the hybrid machine
             * @return the next definition stage
             */
            WithCreate withOsProfile(OSProfile osProfile);
        }

        /**
         * The stage of the machine definition allowing to specify PhysicalLocation.
         */
        interface WithPhysicalLocation {
            /**
             * Specifies physicalLocation.
             * @param physicalLocation Resource's Physical Location
             * @return the next definition stage
             */
            WithCreate withPhysicalLocation(String physicalLocation);
        }

        /**
         * The stage of the machine definition allowing to specify Type1.
         */
        interface WithType1 {
            /**
             * Specifies type1.
             * @param type1 The identity type
             * @return the next definition stage
             */
            WithCreate withType1(String type1);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Machine>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithClientPublicKey, DefinitionStages.WithOsProfile, DefinitionStages.WithPhysicalLocation, DefinitionStages.WithType1 {
        }
    }
    /**
     * The template for a Machine update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Machine>, Resource.UpdateWithTags<Update>, UpdateStages.WithPhysicalLocation {
    }

    /**
     * Grouping of Machine update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the machine update allowing to specify PhysicalLocation.
         */
        interface WithPhysicalLocation {
            /**
             * Specifies physicalLocation.
             * @param physicalLocation Resource's Physical Location
             * @return the next update stage
             */
            Update withPhysicalLocation(String physicalLocation);
        }

    }
}
