/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridcompute.v2019_03_18.implementation;

import com.microsoft.azure.management.hybridcompute.v2019_03_18.OSProfile;
import com.microsoft.azure.management.hybridcompute.v2019_03_18.StatusTypes;
import org.joda.time.DateTime;
import java.util.List;
import com.microsoft.azure.management.hybridcompute.v2019_03_18.ErrorDetail;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Describes a hybrid machine.
 */
@JsonFlatten
public class MachineInner extends Resource {
    /**
     * Specifies the operating system settings for the hybrid machine.
     */
    @JsonProperty(value = "properties.osProfile")
    private OSProfile osProfile;

    /**
     * The provisioning state, which only appears in the response.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * The status of the hybrid machine agent. Possible values include:
     * 'Connected', 'Disconnected', 'Error'.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private StatusTypes status;

    /**
     * The time of the last status change.
     */
    @JsonProperty(value = "properties.lastStatusChange", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastStatusChange;

    /**
     * Details about the error state.
     */
    @JsonProperty(value = "properties.errorDetails", access = JsonProperty.Access.WRITE_ONLY)
    private List<ErrorDetail> errorDetails;

    /**
     * The hybrid machine agent full version.
     */
    @JsonProperty(value = "properties.agentVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String agentVersion;

    /**
     * Specifies the hybrid machine unique ID.
     */
    @JsonProperty(value = "properties.vmId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmId;

    /**
     * Specifies the hybrid machine display name.
     */
    @JsonProperty(value = "properties.displayName", access = JsonProperty.Access.WRITE_ONLY)
    private String displayName;

    /**
     * Specifies the hybrid machine FQDN.
     */
    @JsonProperty(value = "properties.machineFqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String machineFqdn;

    /**
     * Resource's Physical Location.
     */
    @JsonProperty(value = "properties.physicalLocation")
    private String physicalLocation;

    /**
     * Public Key that the client provides to be used during initial resource
     * onboarding.
     */
    @JsonProperty(value = "properties.clientPublicKey")
    private String clientPublicKey;

    /**
     * The Operating System running on the hybrid machine.
     */
    @JsonProperty(value = "properties.osName", access = JsonProperty.Access.WRITE_ONLY)
    private String osName;

    /**
     * The version of Operating System running on the hybrid machine.
     */
    @JsonProperty(value = "properties.osVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String osVersion;

    /**
     * The identity type.
     */
    @JsonProperty(value = "identity.type")
    private String type1;

    /**
     * The identity's principal id.
     */
    @JsonProperty(value = "identity.principalId", access = JsonProperty.Access.WRITE_ONLY)
    private String principalId;

    /**
     * The identity's tenant id.
     */
    @JsonProperty(value = "identity.tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /**
     * Get specifies the operating system settings for the hybrid machine.
     *
     * @return the osProfile value
     */
    public OSProfile osProfile() {
        return this.osProfile;
    }

    /**
     * Set specifies the operating system settings for the hybrid machine.
     *
     * @param osProfile the osProfile value to set
     * @return the MachineInner object itself.
     */
    public MachineInner withOsProfile(OSProfile osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the provisioning state, which only appears in the response.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status of the hybrid machine agent. Possible values include: 'Connected', 'Disconnected', 'Error'.
     *
     * @return the status value
     */
    public StatusTypes status() {
        return this.status;
    }

    /**
     * Get the time of the last status change.
     *
     * @return the lastStatusChange value
     */
    public DateTime lastStatusChange() {
        return this.lastStatusChange;
    }

    /**
     * Get details about the error state.
     *
     * @return the errorDetails value
     */
    public List<ErrorDetail> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the hybrid machine agent full version.
     *
     * @return the agentVersion value
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Get specifies the hybrid machine unique ID.
     *
     * @return the vmId value
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get specifies the hybrid machine display name.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get specifies the hybrid machine FQDN.
     *
     * @return the machineFqdn value
     */
    public String machineFqdn() {
        return this.machineFqdn;
    }

    /**
     * Get resource's Physical Location.
     *
     * @return the physicalLocation value
     */
    public String physicalLocation() {
        return this.physicalLocation;
    }

    /**
     * Set resource's Physical Location.
     *
     * @param physicalLocation the physicalLocation value to set
     * @return the MachineInner object itself.
     */
    public MachineInner withPhysicalLocation(String physicalLocation) {
        this.physicalLocation = physicalLocation;
        return this;
    }

    /**
     * Get public Key that the client provides to be used during initial resource onboarding.
     *
     * @return the clientPublicKey value
     */
    public String clientPublicKey() {
        return this.clientPublicKey;
    }

    /**
     * Set public Key that the client provides to be used during initial resource onboarding.
     *
     * @param clientPublicKey the clientPublicKey value to set
     * @return the MachineInner object itself.
     */
    public MachineInner withClientPublicKey(String clientPublicKey) {
        this.clientPublicKey = clientPublicKey;
        return this;
    }

    /**
     * Get the Operating System running on the hybrid machine.
     *
     * @return the osName value
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the version of Operating System running on the hybrid machine.
     *
     * @return the osVersion value
     */
    public String osVersion() {
        return this.osVersion;
    }

    /**
     * Get the identity type.
     *
     * @return the type1 value
     */
    public String type1() {
        return this.type1;
    }

    /**
     * Set the identity type.
     *
     * @param type1 the type1 value to set
     * @return the MachineInner object itself.
     */
    public MachineInner withType1(String type1) {
        this.type1 = type1;
        return this;
    }

    /**
     * Get the identity's principal id.
     *
     * @return the principalId value
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the identity's tenant id.
     *
     * @return the tenantId value
     */
    public String tenantId() {
        return this.tenantId;
    }

}
